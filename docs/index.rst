The ``thompson`` package
========================

`Nathan Barker <https://www.dpmms.cam.ac.uk/~nb443/research.html>`_, `Andrew Duncan <http://www.mas.ncl.ac.uk/~najd2/>`_ and `David Robertson <https://www.students.ncl.ac.uk/d.m.robertson/>`_ are currently preparing a paper entitled *The power conjugacy problem in Higman-Thompson groups* which addresses the following problem in the groups named :math:`G_{n,r}`.

.. epigraph::
	
	[AS]_ Given two elements :math:`x` and :math:`y` of a group, are there integers :math:`a` and :math:`b` and a third element :math:`z` for which :math:`x^a = zy^bz^{-1} \neq 1`? If so, provide them.

This package aims to implement the algorithms described in the paper. To do so it provides tools for working in

- the algebra :math:`V_{n,r}`, a certain set of :mod:`words <thompson.word>`, and
- the automorphism group :math:`G_{n,r} = \operatorname{Aut}(V_{n,r})`.

.. warning::
	
	For the most part, this documentation is automatically generated by `Sphinx <http://sphinx-doc.org/>`_ , so it's not the prettiest thing that's ever been written.

Overview
--------

This all began as a series of tools to draw tree pair diagrams in `Thompson's group <http://en.wikipedia.org/wiki/Thompson_groups>`_ :math:`V = G_{2,1}`, hence the name ``thompson``. The focus has moved away from trees diagrams towards bijections between bases of words. From there, the package has grown and it now serves as an implementation of the algorithms we describe in the paper. Chief among these are the algorithms which:

- Determine the :meth:`type of component which contains a given element <thompson.automorphism.Automorphism.orbit_type>`, with respect to some given basis [Lemma :paperref:`lem:qnf`]
- Computes the :meth:`quasi-normal basis <thompson.automorphism.Automorphism.compute_quasinormal_basis>` for a given automorphism  [Lemma :paperref:`lem:qnf`]
- Test to see if two words :meth:`share an orbit <thompson.automorphism.Automorphism.share_orbit>`  [Lemma :paperref:`9.7H`]
- Test to see if two automorphism are :meth:`conjugate <thompson.mixed.MixedAut.test_conjugate_to>` [Algorithm :paperref:`conjAlgorithm`] and :meth:`power conjugate <thompson.mixed.MixedAut.test_power_conjugate_to>` [Algorithm :paperref:`powerconjAlgorithm`].

Implementation details
----------------------

The implementation is written in `Python <python.org>`_ and runs under Python 3.3 and above. The intent was to provide a proof-of-concept rather than a perfectly optimised implementation. Despite this, we have found the program useful both as a calculator for :math:`G_{n,r}`, and for verifying or rebuking conjectures. The source code (both to the program and this documentation) is publicly available from `GitHub <https://github.com/DMRobertson/thompsons_v>`_.

.. todo::
	
	Make this available under an open-source license?
	Installation instructions/ Tutorial

Contents
--------

.. toctree::
   :maxdepth: 1
   
   Number Theory <thompson.number_theory>
   Words and standard forms <thompson.word>
   Generating sets and bases <thompson.generators>
   Homomorphisms <thompson.homomorphism>
   Orbits <thompson.orbits>
   Automorphism <thompson.automorphism>
   MixedAuts <thompson.mixed>
   Free factors <thompson.factors>
   Examples <thompson.examples>
   References <references>

Indices
-------

* :ref:`genindex`

