Generating sets and bases 
=========================

Let :math:`S` be a set of words in :math:`V_{n,r}`. We can obtain new words by applying the operations :math:`\alpha_i` and :math:`\lambda` to elements of :math:`S`. Next, we can apply the operations to the new words we've received. This process continues indefinitely, producing a set of words :math:`T` whose elements all come from the original set :math:`S`. We call :math:`T` the *subalgebra generated by* :math:`S`.

Of particular interest are *bases*, which we can think of as generating sets which do not contain any redundant elements. For example, it would be pointless to include each of :math:`x`, :math:`x \alpha_1` and :math:`x \alpha_2` in `S`, as the first can be obtained from the last two and vice versa.

The Generators class
--------------------

.. automodule:: thompson.generators
    :members:
    :undoc-members:
    :show-inheritance:

Next steps
----------

Suppose we have a map :math:`f \colon V_{n,r} \to V_{n',r'}`. If this is just a set map then we would have to specify the image of every word in :math:`V_{n,r}`. However, if :math:`f` preserves structure then it is sufficient to specify the image of a generating set---or even better, a basis---for :math:`V_{n,r}`. Such maps :math:`f` are called *homomorphisms*. The next module describes isomorphisms in terms of the image of a given basis.